name: Build Plotting Tool (Advanced)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
        - debug
        - release

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
          
    - name: Build Docker image with cache
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: psyonic-plotting-tools:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        
    - name: Extract executable from container
      run: |
        docker run --rm -v ${{ github.workspace }}:/host psyonic-plotting-tools:latest /bin/bash -c "cp /app/dist/plot-lines /host/"
        
    - name: Verify executable exists and show info
      run: |
        if [ -f "./plot-lines" ]; then
          echo "✅ Executable created successfully"
          echo "📁 File size:"
          ls -lh ./plot-lines
          echo "🔍 File type:"
          file ./plot-lines
          echo "📋 File permissions:"
          ls -la ./plot-lines
        else
          echo "❌ Executable not found"
          echo "📂 Current directory contents:"
          ls -la
          exit 1
        fi
        
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: plot-lines-executable-${{ github.run_number }}
        path: plot-lines
        retention-days: 30
        
    - name: Create release package (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        # Create a release package with version info
        VERSION=${GITHUB_REF#refs/tags/}
        mkdir -p release
        cp plot-lines release/
        echo "Psyonic Plotting Tools v$VERSION" > release/README.txt
        echo "Built on: $(date)" >> release/README.txt
        echo "Commit: $GITHUB_SHA" >> release/README.txt
        zip -r plot-lines-v$VERSION-linux.zip release/
        
    - name: Upload release package (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: plot-lines-release-v${{ github.ref_name }}
        path: plot-lines-v${{ github.ref_name }}-linux.zip
        retention-days: 90
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `✅ Build completed successfully!
          
          **Artifacts:**
          - \`plot-lines\` executable (Linux)
          
          You can download the executable from the Actions tab.`
          }) 